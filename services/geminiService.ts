import { GoogleGenAI, Type } from "@google/genai";
import type { QuizData, ReportData, WorkoutPlanApiResponse, PendingWorkoutPlan, ChatMessage, WorkoutGuideDraft } from '../types';

// FIX: Per guidelines, API key must come from process.env.API_KEY, not import.meta.env.
const apiKey = process.env.API_KEY;

if (!apiKey) {
  // FIX: Updated error message to reflect the new environment variable.
  throw new Error("API_KEY environment variable is not set");
}

// Use new GoogleGenAI({apiKey: ...}) as per SDK guidelines
const ai = new GoogleGenAI({ apiKey: apiKey });

/**
 * Generates a fitness assessment report based on user quiz data.
 * This function has been simplified to use a direct text prompt as per the user's request.
 * It returns a minimal ReportData object to maintain compatibility with the UI.
 */
export const generateAssessmentReport = async (quizData: QuizData): Promise<ReportData> => {
    try {
        const prompt = `
            Act as a certified personal trainer and nutritionist.
            Analyze this user’s data and create a professional, motivational report in markdown format.
            The report should cover: 
            1) Current Snapshot, 2) Daily Nutrition Targets, 3) Body Composition, 4) Calories & Burn, 5) Key Issues.
            
            Data: ${JSON.stringify(quizData, null, 2)}
        `;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash', // Use 'gemini-2.5-flash' for general text tasks
            contents: prompt,
        });

        const reportText = response.text;

        // Return a valid ReportData object to avoid breaking ReportPage.tsx
        return {
            report_markdown: reportText,
            numbers: { current_intake_kcal: 0, current_burn_kcal: 0, calorie_gap_kcal: 0 },
            nutrition_targets: { recommended_calories_kcal: 0, protein_g: 0, water_l: 0, carbs_g_range: null, fats_g_range: null },
            body_comp: { estimated_bf_percent: 0, bf_ideal_band: [0, 0], bf_status: "within", estimated_tbw_percent: 0, tbw_typical_band: [0, 0], tbw_status: "within" },
            flags: [],
            methodology: ["Report generated by iFitBot AI."],
        };

    } catch (err) {
        console.error("Gemini API Error in generateAssessmentReport:", err);
        // Return an error message within the expected structure
        return {
            report_markdown: "⚠️ # Failed to generate report.\n\nThe AI service may be temporarily unavailable. Please try again later.",
            numbers: { current_intake_kcal: 0, current_burn_kcal: 0, calorie_gap_kcal: 0 },
            nutrition_targets: { recommended_calories_kcal: 0, protein_g: 0, water_l: 0, carbs_g_range: null, fats_g_range: null },
            body_comp: { estimated_bf_percent: 0, bf_ideal_band: [0, 0], bf_status: "within", estimated_tbw_percent: 0, tbw_typical_band: [0, 0], tbw_status: "within" },
            flags: [],
            methodology: [],
        };
    }
};

/**
 * Generates a draft workout plan as a structured JSON object.
 */
export const generateWorkoutPlan = async (reportImage: string | null, userName: string, quizData: QuizData | null): Promise<WorkoutPlanApiResponse> => {
    try {
        // Shuffle trainers for assignment
        const trainers: ("Athul" | "Athithiya" | "Saieel")[] = ["Athul", "Athithiya", "Saieel"];
        const assignedTrainerName = trainers[Math.floor(Math.random() * trainers.length)];

        const promptText = `
            Act as an elite AI performance coach.
            Based on the client's assessment data and the provided assessment report image, create a comprehensive and hyper-personalized DRAFT workout plan.
            This draft is for review by a human trainer.
            The output MUST be a valid JSON object matching the provided schema. 
            Analyze the report image to extract key metrics if they aren't available in the JSON data.
            For properties like 'alt_bodyweight' and 'alt_minimal' that might not have a value, return JSON null, not the string "null".

            Client Name: ${userName}
            Client Data (if available): ${JSON.stringify(quizData, null, 2)}
        `;

        const strengthExerciseSchema = {
            type: Type.OBJECT,
            properties: {
                movement: { type: Type.STRING },
                sets: { type: Type.INTEGER },
                reps: { type: Type.STRING },
                rpe_or_tempo: { type: Type.STRING },
                alt_bodyweight: { type: Type.STRING },
                alt_minimal: { type: Type.STRING },
            }
        };

        const workoutDaySchema = {
            type: Type.OBJECT,
            properties: {
                day_name: { type: Type.STRING },
                warmup: { type: Type.OBJECT, properties: { duration_min: { type: Type.INTEGER }, notes: { type: Type.STRING } } },
                strength: { type: Type.ARRAY, items: strengthExerciseSchema },
                conditioning: { type: Type.OBJECT, properties: { style: { type: Type.STRING }, duration_min: { type: Type.INTEGER }, notes: { type: Type.STRING } } },
                cooldown: { type: Type.OBJECT, properties: { duration_min: { type: Type.INTEGER }, notes: { type: Type.STRING } } },
            }
        };

        const workoutGuideDraftSchema = {
            type: Type.OBJECT,
            properties: {
                program_weeks: { type: Type.INTEGER },
                weekly_days: { type: Type.INTEGER },
                phases: {
                    type: Type.ARRAY,
                    items: {
                        type: Type.OBJECT,
                        properties: {
                            name: { type: Type.STRING },
                            weeks: { type: Type.ARRAY, items: { type: Type.INTEGER } },
                            focus: { type: Type.STRING },
                        },
                    },
                },
                equipment_tier: { type: Type.STRING },
                days: { type: Type.ARRAY, items: workoutDaySchema },
                progression_notes: { type: Type.STRING },
                safety_notes: { type: Type.STRING },
            },
        };
        
        const fullResponseSchema = {
            type: Type.OBJECT,
            properties: {
                workout_guide_draft: workoutGuideDraftSchema,
                presentation_markdown: { type: Type.STRING, description: "A user-friendly markdown summary of the workout philosophy and a sample day for the client." },
            }
        };
        
        // FIX: Explicitly type requestParts to allow for both text and inlineData parts,
        // which prevents a TypeScript error when pushing the image part.
        const requestParts: { text?: string; inlineData?: { mimeType: string, data: string } }[] = [{ text: promptText }];
        if (reportImage) {
            const match = reportImage.match(/^data:(.+);base64,(.+)$/);
            if (match) {
                const mimeType = match[1];
                const base64Data = match[2];
                requestParts.push({
                    inlineData: {
                        mimeType,
                        data: base64Data,
                    },
                });
            }
        }
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: { parts: requestParts },
            config: {
                responseMimeType: "application/json",
                responseSchema: fullResponseSchema,
            },
        });

        const responseJson = JSON.parse(response.text);
        const workoutGuideDraft: WorkoutGuideDraft = responseJson.workout_guide_draft;
        const presentationMarkdown: string = responseJson.presentation_markdown;

        return {
            needs_assessment: false,
            cta_copy: null,
            assigned_trainer: { name: assignedTrainerName },
            extracted_from_report: null, // This part is not implemented yet in the prompt
            workout_guide_draft: workoutGuideDraft,
            presentation_markdown: presentationMarkdown,
            trainer_checklist: ["Confirm the plan aligns with client goals.", "Check exercise selection for safety and effectiveness.", "Verify progression logic is appropriate for the client's fitness level."],
            signature_line: `Draft by iFitBot AI for ${userName}`,
        };
    } catch (err) {
        console.error("Gemini API Error in generateWorkoutPlan:", err);
        return {
            needs_assessment: false,
            cta_copy: null,
            assigned_trainer: null,
            extracted_from_report: null,
            workout_guide_draft: null,
            presentation_markdown: "# ⚠️ Generation Error\n\nSorry, the AI couldn't create your plan. This might be due to a poor quality image or high server load. Please try again with a clearer report image."
        };
    }
};


/**
 * Gets a contextual response from the AI for the trainer chatbot.
 */
export const getTrainerChatbotResponse = async (plan: PendingWorkoutPlan, chatHistory: ChatMessage[]): Promise<string> => {
    try {
        const history = chatHistory.map(msg => ({
            role: msg.role,
            parts: [{ text: msg.text }]
        }));

        // The last message is the current user prompt, so we separate it.
        const userPrompt = history.pop();
        if (!userPrompt) {
            return "I'm sorry, I didn't receive a question.";
        }

        const chat = ai.chats.create({
            model: 'gemini-2.5-flash',
            history: history,
            config: {
                systemInstruction: `
                    You are iFitBot, an expert AI assistant for certified personal trainers.
                    Your role is to help the trainer refine and adjust an AI-generated workout plan before they approve it for a client.
                    The trainer is currently reviewing the plan for client: ${plan.userName}.
                    
                    Client's original assessment data:
                    ${JSON.stringify(plan.quizData, null, 2)}
                    
                    The current DRAFT workout plan is:
                    ${JSON.stringify(plan.planData.workout_guide_draft, null, 2)}
                    
                    Your task is to respond to the trainer's requests concisely and professionally. 
                    You can suggest exercise swaps, adjust durations, explain the rationale behind the plan, or modify the plan structure based on their instructions. 
                    When suggesting changes, be specific. For example, instead of "I'll add squats," say "Okay, I've replaced leg press with barbell back squats, 3 sets of 8-12 reps."
                    Always be helpful and defer to the trainer's expertise.
                `,
            },
        });

        const response = await chat.sendMessage({ message: userPrompt.parts[0].text });
        return response.text;

    } catch (error) {
        console.error("Trainer Chatbot Error:", error);
        return "I apologize, but I encountered an error and cannot respond at this moment.";
    }
};
